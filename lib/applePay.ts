import axios from 'axios'

const BACKEND_URL_VALIDATE_SESSION = 'https://{yourServer}/validateSession'
const BACKEND_URL_PAY = 'https://{yourServer}/pay'

// High level configuration options.
const default_config = {
    payments: {
        acceptedCardSchemes: ['amex', 'masterCard', 'maestro', 'visa', 'mada']
    },
    shop: {
        product_price: 10.0,
        shop_name: 'Demo Shop',
        shop_localisation: {
            currencyCode: 'GBP',
            countryCode: 'GB'
        }
    },
    shipping: {
        GB_region: [{
                label: 'Free Shipping',
                amount: '0.00',
                detail: 'Arrives in 3-5 days',
                identifier: 'freeShipping'
            },
            {
                label: 'Express Shipping',
                amount: '5.00',
                detail: 'Arrives in 1-2 days',
                identifier: 'expressShipping'
            }
        ],
        WORLDWIDE_region: [{
            label: 'Worldwide Standard Shipping',
            amount: '10.00',
            detail: 'Arrives in 5-8 days',
            identifier: 'worldwideShipping'
        }]
    }
}

/**
     * This is the main method of the script, since here we handle all the Apple Pay
     * events. Here you are able to populate your shipping methods, react to  shipping methods
     * changes, and many other interaction that the user has with the Apple Pay pup-up.
     *
     * @param {object} Apple Pay Session (the one generate on the button click)
     *
     */
function handleApplePayEvents(appleSession: ApplePaySession) {
    // This is the first event that Apple triggers. Here you need to validate the
    // Apple Pay Session from your Back-End
    appleSession.onvalidatemerchant = function (event) {
        validateApplePaySession(event.validationURL, (merchantSession: any): void => appleSession.completeMerchantValidation(merchantSession))
    }
    
}

// @param {string} appleUrl The Apple Pay validation URL generated by Apple
// @param {function} callback Callback function used to return the server call outcome
// @return {object} The session payload
function validateApplePaySession(appleUrl: string, callback: any): void {
    // I'm using AXIOS to do a POST request to the backend but any HTTP client can be used
    axios.post(
        BACKEND_URL_VALIDATE_SESSION,
        {
        appleUrl
        },
        {
        headers: { 'Access-Control-Allow-Origin': '*' }
        })
    .then(function (response) {
        callback(response.data)
    })
}

// Starts the Apple Pay session using a configuration
function startApplePaySession(config: any): void {
    var applePaySession = new ApplePaySession(6, config)
    handleApplePayEvents(applePaySession)
    applePaySession.begin()
}

function applePayAvailable(): boolean {
    return ApplePaySession && ApplePaySession.canMakePayments()
    // canMakePaymentsWithActiveCard(merchantIdentifier: string):
}

export { startApplePaySession, default_config }
